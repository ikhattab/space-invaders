// Generated by CoffeeScript 1.8.0
(function() {
  var Bullet, Game, Invader, KeyBoarder, Player, isColliding;

  Game = (function() {
    var createInvaders, drawRect;

    function Game(canvasId, soundId) {
      var canvas, gameSize, screen, tick;
      canvas = document.getElementById(canvasId);
      this.shootSound = document.getElementById(soundId);
      screen = canvas.getContext('2d');
      gameSize = {
        x: canvas.width,
        y: canvas.height
      };
      this.bodies = createInvaders(this).concat(new Player(this, gameSize));
      tick = (function(_this) {
        return function() {
          _this.update();
          _this.draw(screen, gameSize);
          return requestAnimationFrame(tick);
        };
      })(this);
      tick();
    }

    createInvaders = function(game) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 24; i = ++_i) {
        _results.push(new Invader(game, {
          x: 30 + (i % 8) * 30,
          y: 30 + (i % 3) * 30
        }));
      }
      return _results;
    };

    Game.prototype.update = function() {
      var body, notCollidingWithAnything, _i, _len, _ref, _results;
      notCollidingWithAnything = (function(_this) {
        return function(b1) {
          return (_this.bodies.filter(function(b2) {
            return isColliding(b1, b2);
          })).length === 0;
        };
      })(this);
      this.bodies = this.bodies.filter(notCollidingWithAnything);
      _ref = this.bodies;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        _results.push(body.update());
      }
      return _results;
    };

    Game.prototype.addBody = function(body) {
      return this.bodies.push(body);
    };

    Game.prototype.invadersBelow = function(invader) {
      return this.bodies.filter(function(b) {
        return b instanceof Invader && b.center.y > invader.center.y && b.center.x - invader.center.x < invader.size.x;
      }).length > 0;
    };

    drawRect = function(screen, body) {
      return screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);
    };

    Game.prototype.draw = function(screen, gameSize) {
      var body, _i, _len, _ref, _results;
      screen.clearRect(0, 0, gameSize.x, gameSize.y);
      _ref = this.bodies;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        _results.push(drawRect(screen, body));
      }
      return _results;
    };

    return Game;

  })();

  Player = (function() {
    function Player(game, gameSize) {
      this.game = game;
      this.gameSize = gameSize;
      this.size = {
        x: 15,
        y: 15
      };
      this.center = {
        x: this.gameSize.x / 2,
        y: this.gameSize.y - this.size.y
      };
      this.keyBoarder = new KeyBoarder;
    }

    Player.prototype.update = function() {
      var bullet;
      if (this.keyBoarder.isDown(this.keyBoarder.KEYS.LEFT)) {
        this.center.x -= 2;
      }
      if (this.keyBoarder.isDown(this.keyBoarder.KEYS.RIGHT)) {
        this.center.x += 2;
      }
      if (this.center.x < this.size.x) {
        this.center.x = this.size.x;
      }
      if (this.center.x > this.gameSize.x - this.size.x) {
        this.center.x = this.gameSize.x - this.size.x;
      }
      if (this.keyBoarder.isDown(this.keyBoarder.KEYS.SPACE)) {
        bullet = new Bullet({
          x: this.center.x,
          y: this.center.y - this.size.y
        }, {
          x: 0,
          y: -6
        });
        this.game.addBody(bullet);
        this.game.shootSound.load();
        return this.game.shootSound.play();
      }
    };

    return Player;

  })();

  Invader = (function() {
    function Invader(game, center) {
      this.game = game;
      this.center = center;
      this.size = {
        x: 15,
        y: 15
      };
      this.patrolX = 0;
      this.speedX = 0.3;
    }

    Invader.prototype.update = function() {
      var bullet;
      if (this.patrolX < 0 || this.patrolX > 40) {
        this.speedX = -this.speedX;
      }
      this.center.x += this.speedX;
      this.patrolX += this.speedX;
      if (Math.random() > 0.995 && !this.game.invadersBelow(this)) {
        bullet = new Bullet({
          x: this.center.x,
          y: this.center.y + this.size.y
        }, {
          x: Math.random() - 0.5,
          y: 2
        });
        return this.game.addBody(bullet);
      }
    };

    return Invader;

  })();

  Bullet = (function() {
    function Bullet(center, velocity) {
      this.center = center;
      this.velocity = velocity;
      this.size = {
        x: 3,
        y: 3
      };
    }

    Bullet.prototype.update = function() {
      this.center.x += this.velocity.x;
      return this.center.y += this.velocity.y;
    };

    return Bullet;

  })();

  KeyBoarder = (function() {
    function KeyBoarder() {
      var keyState;
      keyState = {};
      window.onkeydown = function(e) {
        return keyState[e.keyCode] = true;
      };
      window.onkeyup = function(e) {
        return keyState[e.keyCode] = false;
      };
      this.isDown = function(keyCode) {
        return keyState[keyCode] === true;
      };
      this.KEYS = {
        LEFT: 37,
        RIGHT: 39,
        SPACE: 32
      };
    }

    return KeyBoarder;

  })();

  isColliding = function(b1, b2) {
    return !(b1 === b2 || b1.center.x + b1.size.x / 2 <= b2.center.x - b2.size.x / 2 || b1.center.y + b1.size.y / 2 <= b2.center.y - b2.size.y / 2 || b1.center.x - b1.size.x / 2 >= b2.center.x + b2.size.x / 2 || b1.center.y - b1.size.y / 2 >= b2.center.y + b2.size.y / 2);
  };

  window.onload = function() {
    return new Game('screen', 'shoot-sound');
  };

}).call(this);
